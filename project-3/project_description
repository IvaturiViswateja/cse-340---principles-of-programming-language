The goal of this project is to give you experience in Hindley-Milner type checking.
We begin by introducing the grammar of our language which is based on the previous project with additional constructs. Then we will discuss the semantics of our language and type checking rules. Finally we will go over a few examples and formalize the expected output.

1.	Lexical Specification
Here is the list of tokens that your lexical analyzer should recognize (the new tokens are listed first):

INT = "int" REAL = "real" BOOL = "bool" TRUE = "true" FALSE = "false" IF = "if"
WHILE = "while" SWITCH = "switch" CASE = "case" NOT = "!"
PLUS = "+" MINUS = "-" MULT = "*" DIV = "/" GREATER = ">" LESS = "<" GTEQ = ">=" LTEQ = "<="
NOTEQUAL = "<>" LPAREN = "(" RPAREN = ")"
NUM = (pdigit digit*) + 0 REALNUM = NUM "." digit digit* PUBLIC = "public"
PRIVATE = "private" EQUAL = "="
COLON = ":"
COMMA = "," SEMICOLON = ";" LBRACE = "{" RBRACE = "}"
ID = letter (letter + digit)*
 
2.	Grammar
Here is the grammar for our input language:


program	-> global_vars body
global_vars	-> Îµ global_vars	-> var_decl_list var_decl_list	-> var_decl
var_decl_list	-> var_decl var_decl_list
var_decl	-> var_list COLON type_name SEMICOLON
var_list	-> ID
var_list	-> ID COMMA var_list
type_name	-> INT
type_name	-> REAL
type_name	-> BOOL
body	-> LBRACE stmt_list RBRACE
stmt_list	-> stmt
stmt_list	-> stmt stmt_list
stmt	-> assignment_stmt
stmt	-> if_stmt
stmt	-> while_stmt
stmt	-> switch_stmt
assignment_stmt -> ID EQUAL expression SEMICOLON expression	-> primary
expression	-> binary_operator expression expression expression	-> unary_operator expression unary_operator -> NOT
binary_operator -> PLUS | MINUS | MULT | DIV
binary_operator -> GREATER | LESS | GTEQ | LTEQ | EQUAL | NOTEQUAL primary	-> ID
primary	-> NUM
primary	-> REALNUM
primary	-> TRUE
primary	-> FALSE
if_stmt	-> IF LPAREN expression RPAREN body
while_stmt	-> WHILE LPAREN expression RPAREN body
switch_stmt	-> SWITCH LPAREN expression RPAREN LBRACE case_list RBRACE
case_list	-> case
case_list	-> case case_list
case	-> CASE NUM COLON body
 
3.	Language Semantics

3.1.	Types
The language has three built-in types:


3.2.	Variables
Programmers can declare variables either explicitly or implicitly.
Explicit variables are declared in an

A variable is declared implicitly if it is not declared explicitly but it appears in the program body.


Example
Consider the following program written in our language:


This program has four variables declared: x , y , z , and w , with x and y explicitly declared and z
and w implicitly declared.

3.3.	Type System
Our language uses structural equivalence for checking type equivalence. Implicit types will be inferred from the usage (in a simplified form of Hindley-Milner type inference).
Here are all the type rules/constraints that your type checker will enforce (constraints are labeled for reference):
C1: The left hand side of an assignment should have the same type as its right hand side

C2: The operands of a binary operator ( GTEQ PLUS , MINUS , MULT , DIV , GREATER , LESS , )
 
,	LTEQ ,	EQUAL and NOTEQUAL
 
should have the same type (it can be any type)
 

C3: The operand of a unary operator ( NOT ) should be of type
 
C4: Condition of if and while statements should be of type bool

C5: The expression that follows the	keyword in switch_stmt should be of type

The type of expression binary_operator op1 op2 is the same as the type of op1 and
 
op2 if operator is PLUS , MINUS , MULT or DIV . Note that the same type due to C2
The type of expression
 
and
 
must have
 

 

The type of expression constants are of type
constants are of type

values are of type	bool


4.	Output
There are two scenarios:
There is a type error in the input program There are no type errors in the input program

4.1.	Type Error
If any of the type constraints (listed in the Type System section above) is violated in the input program, then the output of your program should be:


Where <line_number> is replaced with the line number that the violation occurs and
<constraint> should be replaced with the label of the violated type constraint (possible values are C1 through C5). Note that you can assume that anywhere a violation can occur it will be on a single line.
 
4.2.	No Type Error
If there are no type errors in the input program, then you should output type information for all variables in the input program in the order they appear in the program. There are two cases:
If the type of the variable is determined to be one of the builtin types, then output one line in the following format:


where <variable> should be replaced by the variable name and <type> should be replaced by the type of the variable.
If the type of the variable could not be determined to be one of the builtin types, then you need to list all variables that have the same type as the target variable and mark all of them as printed (so as to not print a separate entry for those later). You should output one line in the following format:


where <variable_list> is a comma-separated list of variables that have the same type in the order they appear in the program.

5.	Examples
Given the following:


The output will be the following:


This is because the type of < b 2 is bool , but a is of type int which is a violation of C1.
 

 

The output will be the following:


This is because the type of b is int and the type of 2.5 is real which means in the
 
expression
Given the following:
 
C2 is violated
 

 

The output will be the following:


Given the following:


The output will be the following:


 
Note that b is not listed separately because it is marked as printed when listed with a
line of the output.
 
the first
 

 

The output will be the following:


Given the following:


The output will be the following:


Given the following:


The output will be the following:

 

 

The output will be the following:


Given the following:


The output will be the following:


Note that z and w are not listed with x
6.	Requirements
You should use C/C++, no other programming languages are allowed.

You should submit your code on the course submission website, no other submission forms will be accepted.

Also submit the output file obtained from the server
